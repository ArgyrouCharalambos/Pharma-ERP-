<!DOCTYPE html>
<html lang="fr" class="h-full bg-gray-50">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PharmaManager - Produits</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <style>
        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap');
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #f0f9ff;
        }
        .text-gradient {
            background-clip: text;
            -webkit-background-clip: text;
            color: transparent;
        }
        .bg-gradient-to-r {
            background-image: linear-gradient(to right, var(--tw-gradient-stops));
        }
        .transition-all {
            transition-property: all;
            transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
            transition-duration: 150ms;
        }
        .group:hover .group-hover\:opacity-100 {
            opacity: 1;
        }
  </style>
</head>
<body class="h-full"  x-data="{ searchQuery: '', sortBy: 'name' ,sidebarOpen: true}">
  <!-- ... (Structure similaire au dashboard pour sidebar/header) ... -->
  <div class="fixed inset-y-0 z-40 w-[200px] bg-gradient-to-b from-blue-800 to-blue-900 shadow-2xl transform transition-transform duration-300"
       :class="sidebarOpen ? 'translate-x-0' : '-translate-x-full'">
       <div class="py-6 px-2 border-b border-blue-700">
        <h1 class="text-lg font-bold text-white flex items-center">
          <i class="fas fa-clinic-medical mr-1"></i>PharmaManager
        </h1>
      </div>
      <nav class="p-4 space-y-2">
        <a href="/" class="flex items-center p-3 text-white/90 hover:bg-blue-700/20 text-sm font-medium rounded-lg transition-all">
          <i class="fas fa-chart-pie mr-3"></i> Tableau de bord
        </a>
        <a href="/products" class="flex items-center  bg-blue-700/30 p-3 text-white/90 text-sm font-medium hover:bg-blue-700/20 rounded-lg transition-all">
          <i class="fas fa-pills mr-3"></i> Produits
        </a>
        <a href="/sales" class="flex items-center p-3 text-white/90 text-sm font-medium hover:bg-blue-700/20 rounded-lg transition-all">
          <i class="fas fa-receipt mr-3"></i> <p class="ml-1">Ventes</p>
        </a>
        <a href="/products/alerts" class="flex gap-3 text-sm font-medium items-center p-3 text-white/90 hover:bg-blue-700/20 rounded-lg transition-all">
         @if(Alerte)
             <i class="fas fa-exclamation-triangle text-md text-red-600"></i>
             @else
           <i class="fas fa-exclamation-triangle text-md text-purple-100 "></i>
           @endif
           <p>
             Alertes
           </p>
       </a>
       </nav>
  </div>
  <div class="h-full flex flex-col transition-all duration-300" :class="sidebarOpen ? 'ml-48' : 'ml-0'">
    <!-- Header -->
    <header class="bg-white shadow-sm">
      <div class="flex items-center justify-between px-6 py-4">
        <button @click="sidebarOpen = !sidebarOpen" class="text-blue-600 hover:text-blue-800">
          <i class="fas fa-bars text-xl"></i>
        </button>
        <div class="flex items-center space-x-4">
          
          <div class="flex items-center space-x-2">
            
            <span class="text-gray-700 font-medium p-3 pt-2 text-white font-bold text-center bg-blue-600 w-10 h-10 rounded-[50%] ">{{(auth.user?.fullName).charAt(0)}} </span>
                
            <span class="text-gray-700 font-medium">{{auth.user?.fullName}} </span>
          </div>
        </div>
      </div>
    </header>
  <main class="flex-1 p-6">
    
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
      <!-- Carte Statistique 1 -->
      <div class="bg-white rounded-2xl shadow-xl p-6 border-t-4 border-blue-600">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-xl font-bold text-gray-800 mb-2">Stock Total</h2>
            <div class="text-4xl font-bold text-blue-600">
              {{ totalStock.toLocaleString('fr-FR') }}
            </div>
          </div>
          <i class="fas fa-capsules text-4xl text-blue-100"></i>
        </div>
      </div>

        <!-- Carte Statistique 1 -->
        <div class="bg-white rounded-2xl shadow-xl p-6 border-t-4 border-blue-600">
          <div class="flex items-center justify-between">
            <div>
              <h2 class="text-xl font-bold text-gray-800 mb-2">Valeur total du stock</h2>
              <div class="text-4xl font-bold text-blue-600">
                {{ valeurTotalDuStock.toLocaleString('fr-FR') }} Fc
              </div>
            </div>
            <i class="fas fa-chart-line text-4xl text-green-100"></i>
          </div>
        </div>

      <!-- Carte Statistique 3 -->
      <a href="/products/alerts" class="bg-white rounded-2xl shadow-xl p-6 border-t-4 hover:scale-105 transition-transform duration-300 border-purple-600">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-xl font-bold text-gray-800 mb-2">Alertes Actives</h2>
            <div class="text-4xl font-bold text-purple-600">
              {{ Alerte.toLocaleString('fr-FR') }}
            </div>
          </div>
          <span>
            @if(Alerte)
            <i class="fas fa-exclamation-triangle text-4xl text-red-600"></i>
            @else
          <i class="fas fa-exclamation-triangle text-4xl text-purple-100"></i>
          @endif
          </span>
        </div>
      </a>
    </div>
   
<div class="space-y-4">
  <div class="space-y-4">
    <div class="space-y-4">
        <!-- Header de la liste -->
        <div class="bg-gradient-to-r from-blue-600 to-cyan-500 rounded-xl p-4 shadow-md">
            <div class="flex items-center justify-between text-white">
                <h2 class="text-xl font-bold">Inventaire des Médicaments</h2>
                <div class="flex items-center space-x-4">
                    <span id="total-products" class="text-sm font-medium bg-white/20 px-3 py-1 rounded-full">Total : 0 produits</span>
                    <a href="{{ route('products.create' )}}" class="bg-white text-blue-600 px-4 py-2 rounded-lg font-semibold hover:bg-gray-50 transition-all">
                        <i class="fas fa-plus mr-2"></i>Ajouter
                    </a>
                </div>
            </div>
        </div>
    
        <!-- Filtres rapides -->
        <div class="bg-white rounded-xl p-3 shadow-sm border border-gray-100 flex flex-wrap items-center gap-3">
            <div class="relative flex-1 min-w-[200px]">
                <input type="text" id="search-medicament" placeholder="Rechercher un produit..." class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all">
                <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
            </div>
        </div>
    
        <!-- Liste des produits -->
        <div id="product-list" class="grid gap-4">
            <!-- Les produits seront injectés ici dynamiquement -->
        </div>
    
        <!-- Pagination -->
        <div class="bg-white rounded-xl p-4 shadow-sm border border-gray-100 flex items-center justify-between">
            <div id="pagination-info" class="text-sm text-gray-600">
                Affichage de 0 à 0 sur 0 produits
            </div>
            <div class="flex space-x-2">
                <button id="prev-page" class="px-3 py-1 border border-gray-200 rounded-lg text-gray-600 hover:bg-gray-50 disabled:opacity-50">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <!-- Les boutons de pagination seront générés ici -->
                <button id="next-page" class="px-3 py-1 border border-gray-200 rounded-lg text-gray-600 hover:bg-gray-50">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</div>
</div>
  </main>
  <!-- Footer avec déconnexion -->
<footer class="bg-gradient-to-r from-blue-600 to-blue-800 text-white py-6 mt-10">
  <div class="container mx-auto px-4">
    <div class="flex flex-col md:flex-row justify-between items-center">
      <!-- Logo et copyright -->
      <div class="mb-4 md:mb-0">
        <div class="flex items-center space-x-2">
          <i class="fas fa-clinic-medical text-2xl"></i>
          <span class="text-xl font-bold">PharmaManager</span>
        </div>
        <p class="text-blue-100 text-sm mt-1">© 2025 Tous droits réservés</p>
      </div>


      <!-- Bouton de déconnexion -->
      <form method="GET" action="/deconnect" class="mt-4 md:mt-0">
        <button type="submit" class="bg-white text-blue-600 hover:bg-blue-50 px-4 py-2 rounded-lg font-medium flex items-center transition-colors">
          <i class="fas fa-sign-out-alt mr-2"></i> Déconnexion
        </button>
      </form>
    </div>
  </div>
</footer>
<script>
  document.addEventListener('DOMContentLoaded', function() {
      // Configuration
      const productsPerPage = 5;
      let currentPage = 1;
      let allProducts = [];
      let filteredProducts = [];

      // Éléments du DOM
      const searchInput = document.getElementById('search-medicament');
      const productContainer = document.getElementById('product-list');
      const paginationInfo = document.getElementById('pagination-info');
      const prevButton = document.getElementById('prev-page');
      const nextButton = document.getElementById('next-page');
      const totalProductsSpan = document.getElementById('total-products');
      
      // Générer des produits de démonstration
      function generateSampleProducts(count) {
          const products = [];
          
          @each(product in PRODUCT)
      

          products.push({
             id: {{product.id}},
                  name: "{{product.name}}",
                  alertExpired: {{product.alertExpired}},
                  quantity:{{product.quantity}} ,
                  status:
                  @if(Number(DateTime.fromISO(product.expirationDate).toFormat('yyyy')) < Number(DateTime.now().toFormat('yyyy')) || 
    (Number(DateTime.fromISO(product.expirationDate).toFormat('yyyy')) === Number(DateTime.now().toFormat('yyyy')) && Number(DateTime.fromISO(product.expirationDate).toFormat('MM')) < Number(DateTime.now().toFormat('MM'))) || 
    (Number(DateTime.fromISO(product.expirationDate).toFormat('yyyy')) === Number(DateTime.now().toFormat('yyyy')) && Number(DateTime.fromISO(product.expirationDate).toFormat('MM')) === Number(DateTime.now().toFormat('MM')) && Number(DateTime.fromISO(product.expirationDate).toFormat('dd')) <=  Number(DateTime.now().toFormat('dd'))))
  'EXPIRÉ'
@else
  'VALIDE'
@endif
                   ,
                  price: {{product.price}},
                  expirationDate: "{{(product.expirationDate).toFormat('dd/MM/yyyy')}}",
                  updatedAt:"{{(product.updatedAt).toFormat('dd/MM/yyyy')}}" ,
                  alertSeuil:"{{product.alertSeuil}}"
          } )
          @end

          return products;
      }
      
      // Formater une date au format dd/MM/yyyy
      function formatDate(date) {
          const day = String(date.getDate()).padStart(2, '0');
          const month = String(date.getMonth() + 1).padStart(2, '0');
          const year = date.getFullYear();
          return `${day}/${month}/${year}`;
      }
      function renderProducts(products) {
    productContainer.innerHTML = ''; // Vider le conteneur

    products.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card bg-white rounded-xl shadow-sm hover:shadow-md transition-all overflow-hidden border border-gray-100 group';

        const layoutWrapper = document.createElement('div');
        layoutWrapper.className = 'flex flex-col md:flex-row';

        // -- Colonne principale
        const mainColumn = document.createElement('div');
        mainColumn.className = 'flex-1 p-4 md:p-5 flex items-start gap-4';

        const iconWrapper = document.createElement('div');
        iconWrapper.className = 'bg-gradient-to-br from-blue-50 to-cyan-50 rounded-xl p-3 flex items-center justify-center shrink-0';
        const icon = document.createElement('i');
        icon.className = 'fas fa-pills text-blue-500 text-xl md:text-2xl';
        iconWrapper.appendChild(icon);

        const infoWrapper = document.createElement('div');
        infoWrapper.className = 'flex-1 min-w-0';

        const header = document.createElement('div');
        header.className = 'flex items-baseline gap-2 flex-wrap';


        const alert_seuil = document.createElement('p');
        alert_seuil.className = 'text-xs pt-2 font-semibold text-gray-500';
        alert_seuil.textContent = `Seuil d'Alerte : ${product.alertSeuil} unités`;

        const name = document.createElement('h3');
        name.className = 'product-name text-lg md:text-xl font-bold text-gray-800 truncate';
        name.textContent = product.name;

        const badge = document.createElement('span');
        badge.className = 'px-2 py-1 rounded-full text-xs font-medium ' + (product.status === "EXPIRÉ" ? 'bg-red-100 text-red-800' : 'bg-emerald-100 text-emerald-800');
        badge.textContent = product.status ;

        header.appendChild(name);
        header.appendChild(badge);

        // Stock et prix
        const detailsGrid = document.createElement('div');
        detailsGrid.className = 'mt-2 grid grid-cols-1 sm:grid-cols-2 gap-3';

        // Stock
        const stockDiv = document.createElement('div');
        const stockLabel = document.createElement('p');
        stockLabel.className = 'text-xs font-semibold text-gray-500';
        stockLabel.textContent = 'Stock';

        const stockBarWrapper = document.createElement('div');
        stockBarWrapper.className = 'flex items-center gap-3';

        const stockBarBg = document.createElement('div');
        stockBarBg.className = 'w-full bg-gray-200 rounded-full h-2 overflow-hidden';

        const stockBar = document.createElement('div');
        stockBar.className = 'bg-gradient-to-r from-cyan-500 to-blue-600 h-full';
        stockBar.style.width = Math.min(product.quantity, 100) + '%';
        stockBarBg.appendChild(stockBar);

        const stockValue = document.createElement('span');
        stockValue.className = 'text-sm font-bold whitespace-nowrap';
        stockValue.textContent = product.quantity.toLocaleString('fr-FR') + ' unités';

        stockBarWrapper.appendChild(stockBarBg);
        stockBarWrapper.appendChild(stockValue);

        stockDiv.appendChild(stockLabel);
        stockDiv.appendChild(stockBarWrapper);

        // Prix
        const priceDiv = document.createElement('div');
        const priceLabel = document.createElement('p');
        priceLabel.className = 'text-xs font-semibold text-gray-500';
        priceLabel.textContent = 'Prix unitaire';

        const priceValue = document.createElement('p');
        priceValue.className = 'text-lg font-bold text-gradient bg-gradient-to-r from-blue-600 to-cyan-500 bg-clip-text text-transparent';
        priceValue.textContent = product.price.toLocaleString('fr-FR') + ' Fc';

        priceDiv.appendChild(priceLabel);
        priceDiv.appendChild(priceValue);

        detailsGrid.appendChild(stockDiv);
        detailsGrid.appendChild(priceDiv);

        infoWrapper.appendChild(header);
        infoWrapper.appendChild(alert_seuil);

        infoWrapper.appendChild(detailsGrid);

        mainColumn.appendChild(iconWrapper);
        mainColumn.appendChild(infoWrapper);

        // -- Colonne secondaire
        const secondaryColumn = document.createElement('div');
        secondaryColumn.className = 'border-t md:border-t-0 md:border-l border-gray-100 md:w-48 flex flex-col';

        const topBar = document.createElement('div');
        topBar.className = 'p-4 lg:pb-6 lg:pt-7 flex items-center justify-between';

        const expiration = document.createElement('div');
        expiration.className = `flex items-center text-sm`;
        const calIcon = document.createElement('i');
        calIcon.className = 'far fa-calendar mr-2';
        const dateText = document.createElement('span');
        dateText.textContent = product.expirationDate;

        expiration.appendChild(calIcon);
        expiration.appendChild(dateText);

        const actions = document.createElement('div');
        actions.className = 'flex space-x-3 opacity-0 group-hover:opacity-100 transition-opacity';

        const editLink = document.createElement('a');
        editLink.href = `/products/${product.id}/edit`;
        editLink.className = 'text-blue-500 hover:text-blue-700';
        const editIcon = document.createElement('i');
        editIcon.className = 'fas fa-pen fa-sm';
        editLink.appendChild(editIcon);

        const deleteForm = document.createElement('form');
        deleteForm.action = `/productsDestroy/${product.id}`;
        deleteForm.method = 'POST';

        const csrfInput = document.createElement('input');
        csrfInput.className = 'hidden';
        csrfInput.innerHTML = "{{ csrfField() }}"

        deleteForm.appendChild(csrfInput)

        const methodInput = document.createElement('input');
        methodInput.type = 'hidden';
        methodInput.name = '_method';
        methodInput.value = 'DELETE';

        const deleteButton = document.createElement('button');
        deleteButton.type = 'submit';
        deleteButton.className = 'text-rose-500 hover:text-rose-700';
        const deleteIcon = document.createElement('i');
        deleteIcon.className = 'fas fa-trash fa-sm';
        deleteButton.appendChild(deleteIcon);

        deleteForm.appendChild(csrfInput);
        deleteForm.appendChild(methodInput);
        deleteForm.appendChild(deleteButton);

        actions.appendChild(editLink);
        actions.appendChild(deleteForm);

        topBar.appendChild(expiration);
        topBar.appendChild(actions);

        const bottomBar = document.createElement('div');
        bottomBar.className = 'p-4 lg:pt-6 h-full bg-gray-50 text-xs text-gray-500 border-t border-gray-100';
        bottomBar.textContent = 'MAJ : ' + product.updatedAt;

        secondaryColumn.appendChild(topBar);
        secondaryColumn.appendChild(bottomBar);

        // Ajout final
        layoutWrapper.appendChild(mainColumn);
        layoutWrapper.appendChild(secondaryColumn);
        productCard.appendChild(layoutWrapper);
        productContainer.appendChild(productCard);
    });
}
      
      // Initialisation
      function init() {
          // Générer des produits de démonstration
          allProducts = generateSampleProducts(23);
          filteredProducts = [...allProducts];
          
          // Mettre à jour le compteur total
          totalProductsSpan.textContent = `Total : ${allProducts.length} produits`;
          
          // Initialiser l'affichage
          updateDisplay();
          setupEventListeners();
      }
      
      // Configuration des écouteurs d'événements
      function setupEventListeners() {
          // Recherche
          searchInput.addEventListener('input', filterProducts);
          
          // Navigation pagination
          prevButton.addEventListener('click', () => navigateToPage(currentPage - 1));
          nextButton.addEventListener('click', () => navigateToPage(currentPage + 1));
      }
      
      // Filtrage des produits
      function filterProducts() {
          const searchTerm = searchInput.value.trim().toLowerCase();
          
          filteredProducts = allProducts.filter(product => {
              return product.name.toLowerCase().includes(searchTerm);
          });
          
          currentPage = 1;
          updateDisplay();
      }
      
      // Mise à jour de l'affichage
      function updateDisplay() {
          // Calculer les produits à afficher pour la page courante
          const startIdx = (currentPage - 1) * productsPerPage;
          const endIdx = startIdx + productsPerPage;
          const productsToShow = filteredProducts.slice(startIdx, endIdx);
          
          // Afficher les produits
          renderProducts(productsToShow);
          
          // Mettre à jour les informations de pagination
          updatePaginationInfo();
          
          // Mettre à jour l'état des boutons de navigation
          updateNavigationButtons();
      }
      
      // Mettre à jour les informations de pagination
      function updatePaginationInfo() {
          const totalProducts = filteredProducts.length;
          const start = Math.min((currentPage - 1) * productsPerPage + 1, totalProducts);
          const end = Math.min((currentPage + 1 )* productsPerPage - 1, totalProducts);
          
          paginationInfo.textContent = `Affichage de ${start} à ${end} sur ${totalProducts} produits`;
      }
      
      // Mettre à jour l'état des boutons de navigation
      function updateNavigationButtons() {
          const totalProducts = filteredProducts.length;
          const totalPages = Math.ceil(totalProducts / productsPerPage);
          
          // Bouton précédent
          prevButton.disabled = currentPage === 1;
          
          // Bouton suivant
          nextButton.disabled = currentPage === totalPages || totalPages === 0;
      }
      
      // Navigation entre les pages
      function navigateToPage(page) {
          const totalProducts = filteredProducts.length;
          const totalPages = Math.ceil(totalProducts / productsPerPage);
          
          if (page >= 1 && page <= totalPages) {
              currentPage = page;
              updateDisplay();
          }
      }
      
      // Initialisation
      init();
  });
</script>
</body>
</html>